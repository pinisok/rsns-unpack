export type BuffFactory = Array<{
	id: number;
	idCN: string;
	mod: string;
	isInformalData?: boolean;
	battleTagIdList?: Array<{
		tagId: number;
	}>;
	typeTagList?: Array<{
		tagId: number;
	}>;
	baseEffect?: string;
	isNotChangePos?: boolean;
	isBindAction?: boolean;
	isDispelFightEnd?: boolean;
	isNotRecordDamageAsCard?: boolean;
	iconUrl?: string;
	cantBeDispelled?: boolean;
	bForever?: boolean;
	durationFrame?: number;
	sourceBase?: string;
	customDataTagBase?: string;
	buffTypeFO?: number;
	overlayType?: string;
	sourceList?: any[];
	overlayTimeType?: string;
	level?: number;
	levelTag?: string;
	levelMax?: number;
	levelMaxTag?: string;
	maxLevelBuffId?: number;
	isSameAttribute?: boolean;
	attributeChangeList?: Array<{
		attributeType: string;
		level: number;
		numberType: string;
		rateTag: string;
		skillSelect?: string;
		value_SN: number;
	}>;
	baseValue_SN?: number;
	baseRateTag?: string;
	timeUpEffectList?: Array<{
		buffId: number;
		targetType: string;
	}>;
	dispelEffectList?: Array<{
		buffId: number;
		targetType: string;
	}>;
	appearEffectList?: Array<{
		effectId: number;
		effectPointType?: string;
		offsetX?: number;
		offsetY?: number;
	}>;
	buffEffectByLevel?: Array<{
		effectIdFirst: number;
		effectIdSecond?: number;
		effectIdThird?: number;
		effectPointType?: string;
		level?: number;
		offsetX?: number;
		offsetY?: number;
	}>;
	disappearEffectList?: Array<{
		effectId: number;
		effectPointType?: string;
		offsetX?: number;
		offsetY?: number;
	}>;
	bDamageWithLevel?: boolean;
	bShowLevel?: boolean;
	showLevelInfoId?: number;
	sound?: number;
	effectId?: number;
	effectPointType?: string;
	offsetX?: number;
	offsetY?: number;
	type?: string;
	isNotShowDamage?: boolean;
	isNotRecord?: boolean;
	banCrit?: boolean;
	isMustCrit?: boolean;
	source?: string;
	customDataTag?: string;
	skillSelect?: string;
	skillRateFactorSN?: number;
	skillRateTag?: string;
	isStraightDamage?: boolean;
	shakeXPerFrame?: number;
	shakeDuration?: number;
	buffId?: number;
	treeRoot?: Array<{
		buffId?: number;
		targetType?: string;
	}>;
	isNoAdditionalAttack?: boolean;
	skillMultTag?: boolean;
	setCustomValue?: string;
	isHitSpakle?: boolean;
	actionType?: string;
	stateFrameMax?: number;
	overlayValueType?: string;
	summonID?: number;
	isSummonSelf?: boolean;
	isFixedPosition?: boolean;
	offsetX_SN?: number;
	randomOffsetX_SN?: number;
	offsetZ_SN?: number;
	randomOffsetZ_SN?: number;
	propertyList?: Array<{
		customDataTag: string;
		numType: string;
		propertyType: string;
		skillRateFactorSN: number;
		skillRateTag: string;
		sourcesProperty: string;
	}>;
	hitEffect?: number;
	originalCardID?: number;
	destinationCardID?: number;
	isFindOriginalCard?: boolean;
	bHand?: boolean;
	bLibrary?: boolean;
	bGraveyard?: boolean;
	isChangeLeaderCard?: boolean;
	isChangeLeaderCardCondition?: boolean;
	isDispelAll?: boolean;
	isChangeOrigin?: boolean;
	cooldownFrame?: number;
	targetBuffId?: number;
	dispelTime?: number;
	isTriggerDispelEffect?: boolean;
	isRefreshSnapshot?: boolean;
	num_SN?: number;
	cardSource?: string;
	isSelf?: boolean;
	cardNum_SN?: number;
	cardNumRateTag?: string;
	tagList?: Array<{
		tagId: number;
	}>;
	tagType?: string;
	condition?: string;
	cost_SN?: number;
	isRandomDeck?: boolean;
	isRandomGrave?: boolean;
	isCardNumFillHand?: boolean;
	isJudge?: boolean;
	isRandom?: boolean;
	firstFrame?: number;
	intervalFrame?: number;
	dotEffectList?: Array<{
		buffId: number;
		targetType: string;
	}>;
	isForceSearch?: boolean;
	targetType?: string;
	targetTagList?: Array<{
		tagId: number;
	}>;
	halfWidth_SN?: number;
	attributeType?: string;
	numberType?: string;
	number_SN?: number;
	filterBuffTypeFO?: number;
	filterBuffFO?: number;
	filterBuffJudgeType?: string;
	filterBuffLevel?: number;
	filterStance?: string;
	filterPosition?: string;
	isAimSelf?: boolean;
	targetCount?: number;
	radius_SN?: number;
	useTargetProperty?: boolean;
	additionalBuffList?: Array<{
		additionalBuffId: number;
	}>;
	isNotUseCardActionData?: boolean;
	isIgnoreDeadCard?: boolean;
	isLeaderCard?: boolean;
	judgeBuffId?: number;
	judgeLevel?: number;
	judgeType?: string;
	soundId?: number;
	isIncludeDeck?: boolean;
	isIncludeHand?: boolean;
	isIncludeGrave?: boolean;
	cardNum?: number;
	energySN?: number;
	isReturnInHand?: boolean;
	isOverHandNum?: boolean;
	skinList?: Array<{
		ownerSkinId: number;
		selfSkinId: number;
	}>;
	judgeTagList?: Array<{
		tagId: number;
	}>;
	isEnemyOnly?: boolean;
	isSkill?: boolean;
	skillParamList?: Array<{
		skillId: number;
		tag: string;
		valueSN: number;
		valueTag?: string;
		isDercase?: boolean;
	}>;
	enableOutline?: boolean;
	lineColorR?: number;
	lineColorG?: number;
	lineColorB?: number;
	lineColorA?: number;
	outlineWidth?: number;
	changeActionList?: Array<{
		sourceActionID: number;
		targetActionID: number;
	}>;
	skillParamSN?: number;
	skillParamTag?: string;
	loopFrame?: number;
	isFirst?: boolean;
	ActionId?: number;
	isForceChange?: boolean;
	cardNumTag?: string;
	isToGraveyard?: boolean;
	discardBuff?: number;
	tag?: string;
	isPrecent?: boolean;
	value_SN?: number;
	customTag?: string;
	buffType?: number|string;
	isAddTime?: boolean;
	customTagSource?: string;
	isUseSnapshotDirection?: boolean;
	destination?: string;
	drawCardId?: number;
	rateFactorSN?: number;
	targetEffect?: string;
	isIncludeCantDispel?: boolean;
	isIgnoreLockCost?: boolean;
	isRecord?: boolean;
	frameEventList?: Array<{
		frameEventId: number;
		hHalf_SN?: number;
		isUseCardViewPosition?: boolean;
		isUseTargetPosition?: boolean;
		wHalf_SN?: number;
		x_SN?: number;
		y_SN?: number;
	}>;
	isTempCost?: boolean;
	from?: string;
	isRepeatable?: boolean;
	isChangeCardType?: boolean;
	cardType?: string;
	isTarget?: boolean;
	costSource?: string;
	costRate_SN?: number;
	bMore?: boolean;
	judgeRate_SN?: number;
	judgeRateTag?: string;
	luckType?: string;
	damageSource?: string;
	compareValue_SN?: number;
	side?: string;
	isBasedOnBattleAreaCenter?: boolean;
	isBasedOnSelf?: boolean;
	offsetXSN?: number;
	offsetYSN?: number;
	yTag?: string;
	commandIndex?: number;
	buffTreeId?: number;
	isDamage?: boolean;
	isHeal?: boolean;
	adjustCostList?: Array<{
		cardId: number;
		cost_SN: number;
	}>;
	deadCount?: number;
	isIncludeSummon?: boolean;
	percent_SN?: number;
	targetTagIds?: Array<{
		tagId: number;
	}>;
	isDispelCantDispel?: boolean;
	summonList?: Array<{
		summonId: number;
	}>;
	speedYSN?: number;
	speedXSN?: number;
	repelledType?: string;
	toFixedX?: boolean;
	posXSN?: number;
	teamType?: string;
	cardNumRate_SN?: number;
	handBuffId?: number;
	isRandomMakeUp?: boolean;
	hideViewDelay?: number;
	destroyViewDelay?: number;
	formulaStr?: string;
	targetPrefix?: string;
	customDataList?: Array<{
		customTag: string;
	}>;
	takeDamagePercent_SN?: number;
	jobId?: number;
	isIncludeFall?: boolean;
	isAdditive?: boolean;
	isZNotChange?: boolean;
	offsetZSN?: number;
	r?: number;
	g?: number;
	b?: number;
	aNormalize?: number;
	buff?: number;
	adjustTeamAttribute?: Array<{
		attributeType: string;
		isAddAttribute?: boolean;
		numberType: string;
		rateTag: string;
		value_SN: number;
	}>;
	effectList?: Array<{
		effectId: number;
		leaderEffectId: number;
		level: number;
	}>;
	isAdd?: boolean;
	skinUnitList?: any[];
	targetBuffTypeId?: number;
	isReviveCondition?: boolean;
	randomEffectList?: Array<{
		effectId: number;
		effectPointType: string;
		offsetX: number;
		offsetY: number;
	}>;
	typeList?: Array<{
		type: string;
	}>;
	isAbovePowerBar?: boolean;
	isIncludeSkill?: boolean;
	isIncludeDiscardBtn?: boolean;
	leaderId?: number;
	progress?: number;
	isOnlyOne?: boolean;
	isDiscardOther?: boolean;
	isDeadDontDestroy?: boolean;
	isImmuneOnlyOne?: boolean;
	isFromSelf?: boolean;
	isShowImmune?: boolean;
	count_SN?: number;
	judgeBuff?: number;
	tTarget?: string;
	attributeList?: Array<{
		attributeType?: string;
		numberType?: string;
		tag?: string;
		value_SN?: number;
	}>;
	isAimSelfMakeDammage?: boolean;
	immuneEffect?: string;
	lockCost_SN?: number;
	isSyncLogic?: boolean;
	cardId?: number;
	appearEffect?: number;
	deckIndex?: number;
	isSameColor?: boolean;
	valueTag?: string;
	count?: number;
	damageType?: string;
	list?: Array<{
		targetControllerId?: number;
		targetCreatureId?: number;
		buff?: number;
	}>;
	changeEffectId?: number;
	dispelPolymorphEffectId?: number;
	dispelEffectPointType?: string;
	dispelOffsetX?: number;
	dispelOffsetY?: number;
	isTargetsCardOnly?: boolean;
	handCount?: number;
	cardEffect?: number;
	handIndex?: number;
	isExcludeSelf?: boolean;
	envId?: number;
	duration?: number;
	durationTag?: string;
	isAtBattleCenter?: boolean;
	isToAlly?: boolean;
	isToEnemy?: boolean;
	isToTeam3?: boolean;
	ignoreRecover?: boolean;
	judgeTagId?: number;
	judgeTagNum?: number;
	valueSN?: number;
	isCancelAutoDraw?: boolean;
	isDrawCard?: boolean;
	numSkill_SN1?: number;
	numSkillTag1?: string;
	numSkill_SN2?: number;
	numSkillTag2?: string;
	numSkill_SN3?: number;
	numSkillTag3?: string;
	rateSN?: number;
	camp?: string;
	weather?: number;
	frameAdd?: number;
	radiusSN?: number;
	envList?: Array<{
		envId: number;
	}>;
	judgeCondition?: string;
	team?: string;
	unit?: number;
	isDead?: boolean;
	buffFO?: number;
	ownerAttributeType?: string;
	targetAttributeType?: string;
	weatherId?: number;
	weatherLv?: number;
	specificBuff?: number;
	useMakeDamage?: boolean;
	useDamageSnapshot?: boolean;
	targetBuff?: number;
	frame?: number;
	backtrackBuff?: number;
	isShowImmuneDamage?: boolean;
	num?: number;
	isImmune?: boolean;
	buffList?: Array<{
		buffId: number;
	}>;
	compareType?: string;
	intarval?: number;
	aimBuffId?: number;
	changeBuffId?: number;
	isStop?: boolean;
	controllerId?: number;
	env?: number;
	interval?: number;
	videoPath?: string;
	loopVideoPath?: string;
	fadeInFrame?: number;
	fadeOutFrame?: number;
	buffShieldList?: Array<{
		buffId: number;
	}>;
	initScale?: number;
	scalePreFrame?: number;
	afterScaleFrame?: number;
	speedX_SN?: number;
	randomX_SN?: number;
	speedY_SN?: number;
	randomY_SN?: number;
	speedZ_SN?: number;
	randomZ_SN?: number;
	target_Cost_SN?: number;
	skillList?: Array<{
		skillId: number;
		num?: number;
	}>;
	controllerIndex?: number;
	isCoverBar?: boolean;
	isFollowBar?: boolean;
	fixNum?: number;
	compareWithTeamData?: boolean;
	target?: string;
	minSN?: number;
	maxSN?: number;
	stepSN?: number;
	actionId?: number;
}>